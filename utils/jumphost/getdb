#!/bin/bash

declare -A jumphosts
# Feel free to add more hosts but be aware that bash is picky with the
# spaces (you can use spaces and newlines inside the value string). It's
# important to not use any extra spaces inside the brackets or around the
# equal sign.
# Format is "jumphost host1 port1 host2 port2 host3 port3 ..."
jumphosts=(
    ["dummy_name_1"]="   jumphost_or_ip1     destination_host_or_ip11          12345"
    ["dummy_name_2"]="   jumphost_or_ip2     destination_host_or_ip21          12345"
    ["dummy_name_3"]="   jumphost_or_ip3     destination_host_or_ip31          12345
                                             destination_host_or_ip32          12346"
    ["dummy_name_4"]="   jumphost_or_ip4     destination_host_or_ip41          12345"
    ["dummy_name_5"]="   jumphost_or_ip5     destination_host_or_ip51          12345"
)
# It's easy to make this configurable as well
DESTINATION_PORT=5432

create_ssh_forwarding_command() {
    local FORWARD_COMMAND JUMPHOST HOST PORT REST
    IFS=$' \n' read -d '' JUMPHOST REST <<< $2

    if [ -z "$REST" ]; then
        echo "The entry for \"$1\" is poorly formatted. Exiting..." 1>&2
        exit
    fi

    FORWARD_COMMAND="ssh $JUMPHOST -N "
    # Add all forwarding parameters
    while [ -n "$REST" ]; do
        IFS=$' \n' read -d '' HOST PORT REST <<< $REST

        if [ -z "$PORT" ]; then
            echo "The port for \"$HOST\" is missing. Exiting..." 1>&2
            exit
        fi
        FORWARD_COMMAND="$FORWARD_COMMAND -L ${PORT}:${HOST}:${DESTINATION_PORT} "
    done

    # The actual ssh command is run here
    $FORWARD_COMMAND 1>&2
}

# Entry point to program
######
JUMPHOST_DATA="${jumphosts[$1]}"

if [ -z "$JUMPHOST_DATA" ]; then
    echo "The entry \"$1\" could not be found. Exiting..." 1>&2
    exit
fi

create_ssh_forwarding_command "$1" "$JUMPHOST_DATA"
